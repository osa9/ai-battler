service: ai-battle
frameworkVersion: '3'

custom:
  chatTableName: 'aiBattle-${sls:stage}'

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!venv/**'
    - '!.git/**'

useDotenv: true

provider:
  name: aws
  # runtime: python3.9
  stage: dev
  ecr:
    images:
      latest:
        path: .
        platform: linux/amd64
  region: ap-northeast-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - Fn::GetAtt: [ ChatTable, Arn ]
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
  environment:
    REGION: ${aws:region}
    CHAT_TABLE: ${self:custom.chatTableName}
    MASTODON_SERVER: ${env:MASTODON_SERVER}
    ACCESS_TOKEN: ${env:ACCESS_TOKEN}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    WORKER_FUNCTION: ${self:service}-${self:provider.stage}-worker



functions:
  notify:
    image:
      name: latest
      command: ["lambda_handler.push_notification"]
    events:
      - httpApi:
          path: /push
          method: post
  worker:
    image:
      name: latest
      command: ["lambda_handler.worker"]

  test:
    image:
      name: latest
      command: ["lambda_handler.test"]
    events:
        - httpApi:
            path: /test
            method: get

plugins:
  - serverless-python-requirements

resources:
  Resources:
    ChatTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: notification_id
            AttributeType: S
        KeySchema:
          - AttributeName: notification_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.chatTableName}


